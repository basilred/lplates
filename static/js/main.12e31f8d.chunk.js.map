{"version":3,"sources":["Input/Input.tsx","List/List.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Input","props","handleChange","e","value","target","toUpperCase","setState","onChange","state","this","className","placeholder","React","Component","List","data","length","map","region","key","name","App","originalList","getPlainData","dataList","handleInputChange","bind","result","country","hasOwnProperty","currentCountry","stringCodes","code","toString","push","codes","list","newDataList","codeExists","forEach","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0/XAYqBA,G,wBACnB,WAAYC,GAAoB,IAAD,8BAC7B,4CAAMA,KAORC,aAAe,SAACC,GACd,IAAMC,EAAQD,EAAEE,OAAOD,MAAME,cAC7B,EAAKC,SAAS,CAAEH,UAChB,EAAKH,MAAMO,SAASJ,IARpB,EAAKK,MAAQ,CACXL,MAAOH,EAAMG,OAAS,IAJK,E,sEAcrB,IACAA,EAAUM,KAAKD,MAAfL,MAER,OACE,2BACEO,UAAU,QACVC,YAAY,YACZR,MAAOA,EACPI,SAAUE,KAAKR,mB,GAvBYW,IAAMC,YCU1BC,G,MAlBF,SAACd,GAAmC,IACvCe,EAASf,EAATe,KAER,OACE,wBAAIL,UAAU,QAEVK,EAAKC,OACHD,EAAKE,IAAI,SAAAC,GACP,OACE,wBAAIC,IAAKD,EAAOE,MAAOF,EAAOE,QAGlC,qBCoEKC,E,YAvEb,WAAYrB,GAAuB,IAAD,8BAChC,4CAAMA,KAHAsB,aAAe,EAAKC,aAAa,EAAKvB,MAAMe,MAKlD,EAAKP,MAAQ,CACXgB,SAAU,EAAKF,cAGjB,EAAKG,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBAPO,E,0EAUbX,GACnB,IAAMY,EAAS,GAEf,IAAK,IAAMC,KAAWb,EAEpB,GAAIA,EAAKc,eAAeD,GAAU,CAChC,IAAME,EAAiBf,EAAKa,GAE5B,IAAK,IAAMV,KAAUY,EAEnB,GAAIA,EAAeD,eAAeX,GAAS,CACzC,IACMa,EADcD,EAAeZ,GACHD,IAAI,SAAAe,GAAI,OAAIA,EAAKC,aAEjDN,EAAOO,KAAK,CAAEd,KAAMF,EAAQiB,MAAOJ,KAM3C,OAAOJ,I,wCAGiBxB,GACxB,IAAMiC,EAAO3B,KAAKa,aACde,EAA2B,GAE/B,IAAK,IAAMnB,KAAUkB,EACnB,GAAIA,EAAKP,eAAeX,GAAS,CAAC,IAAD,EACTkB,EAAKlB,GAApBE,EADwB,EACxBA,KAAMe,EADkB,EAClBA,MACTG,GAAsB,EAE1BH,EAAMI,QAAQ,SAAAP,GACRA,IAAS7B,IACXmC,GAAa,KAIbA,GACFD,EAAYH,KAAK,CAAEd,OAAMe,UAI/B1B,KAAKH,SAAS,CAAEkB,SAAUa,M,+BAI1B,OACE,yBAAK3B,UAAU,OACb,4BAAQA,UAAU,cAChB,uDAGA,kBAAC,EAAD,CAAOH,SAAUE,KAAKgB,oBACtB,kBAAC,EAAD,CAAMV,KAAMN,KAAKD,MAAMgB,iB,GApEfZ,IAAMC,W,OCGJ2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,CAAK/B,KAAMA,IAAUgC,SAASC,eAAe,SDkIvD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.12e31f8d.chunk.js","sourcesContent":["import React, { ChangeEvent } from 'react';\nimport './Input.css';\n\ninterface InputProps {\n  value?: string;\n  onChange: (val: string) => void;\n};\n\ninterface InputState {\n  value: string;\n};\n\nexport default class Input extends React.Component<InputProps, InputState> {\n  constructor(props: InputProps) {\n    super(props);\n\n    this.state = {\n      value: props.value || '',\n    };\n  }\n\n  handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.toUpperCase();\n    this.setState({ value });\n    this.props.onChange(value);\n  }\n\n  render() {\n    const { value } = this.state;\n\n    return (\n      <input\n        className=\"Input\"\n        placeholder=\"AA or 123\"\n        value={value}\n        onChange={this.handleChange} />\n    );\n  }\n}\n","import React from 'react';\nimport './List.css';\nimport { IDataList } from '../interfaces';\n\nconst List = (props: { data: IDataList[]; }) => {\n  const { data } = props;\n\n  return (\n    <ul className=\"List\">\n      {\n        data.length\n        ? data.map(region => {\n            return (\n              <li key={region.name}>{region.name}</li>\n            );\n          })\n        : 'Nothing to view'\n      }\n    </ul>\n  );\n};\n\nexport default List;\n","import React from 'react';\nimport './App.css';\n\nimport Input from '../Input/Input';\nimport List from '../List/List';\n\nimport { IData, IDataList } from '../interfaces';\n\n\nclass App extends React.Component<{data: IData}, {dataList: IDataList[]}> {\n\n  private originalList = this.getPlainData(this.props.data);\n\n  constructor(props: {data: IData}) {\n    super(props);\n\n    this.state = {\n      dataList: this.originalList,\n    }\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  private getPlainData(data: IData): IDataList[] {\n    const result = [];\n\n    for (const country in data) {\n\n      if (data.hasOwnProperty(country)) {\n        const currentCountry = data[country];\n\n        for (const region in currentCountry) {\n\n          if (currentCountry.hasOwnProperty(region)) {\n            const regionCodes = currentCountry[region];\n            const stringCodes = regionCodes.map(code => code.toString());\n\n            result.push({ name: region, codes: stringCodes });\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  private handleInputChange(value: string) {\n    const list = this.originalList;\n    let newDataList: IDataList[] = [];\n\n    for (const region in list) {\n      if (list.hasOwnProperty(region)) {\n        const {name, codes} = list[region];\n        let codeExists: boolean = false;\n\n        codes.forEach(code => {\n          if (code === value) {\n            codeExists = true;\n          }\n        });\n\n        if (codeExists) {\n          newDataList.push({ name, codes });\n        }\n      }\n    }\n    this.setState({ dataList: newDataList });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            Enter license plate code\n        </p>\n          <Input onChange={this.handleInputChange} />\n          <List data={this.state.dataList} />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport data from './data.json';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App data={data} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}